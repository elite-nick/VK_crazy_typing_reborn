import os
import re
import random
import vk_api
import time
from threading import Thread

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

templates = ['1', '2']
peers = []
messages = []
typing_type = "typing"
gamlet = 0
print(len(peers))

def captcha_handler(captcha):
    """ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–ø—á–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏ –µ–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç
        –∫–∞–ø—á–∏. –ß–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ get_url –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        –ß–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ try_again –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∫–æ–¥–æ–º –∫–∞–ø—á–∏
    """

    key = input("Enter captcha code {0}: ".format(captcha.get_url())).strip()

    # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∫–∞–ø—á–µ–π
    return captcha.try_again(key)
def check_peer(input_str):
    pattern = r'^-?\d+$' # —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ –º–∏–Ω—É—Å
    if re.match(pattern, input_str):
        return True
    else:
        return False

#token = os.environ['TOKEN']
token = ""
peerID = ""
vk_session = vk_api.VkApi(token=token, captcha_handler=captcha_handler)
vk_session._auth_token()
vk = vk_session.get_api()

def get_dialogs():
  result = ""
  response = vk.messages.getConversations(count=20)
  for items in response['items']:
    if items['conversation']['peer']['type'] == 'user':
      fname = vk.users.get(user_ids=items['conversation']['peer']['id'])
      #print(fname)
      fname = color.BOLD + fname[0]['first_name']+' '+fname[0]['last_name'] + color.END
      result += fname + " | ChatID: " + str(items['conversation']['peer']['id']) + " | –°–æ–æ–±—â–µ–Ω–∏–µ: " + items['last_message']['text'][:100] + "\n"
    elif items['conversation']['peer']['type'] == 'chat':
      title = color.BOLD + items['conversation']['chat_settings']['title'] + color.END
      result += title + " | ChatID: " + str(items['conversation']['peer']['id']) + " | –°–æ–æ–±—â–µ–Ω–∏–µ: " + items['last_message']['text'][:100] + "\n"
  os.system('cls')
  print(result)
  print("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —á–∞—Ç, —Å–∫–æ–ø–∏—Ä—É–π –µ–≥–æ ChatID –∏ –≤–≤–µ–¥–∏ –≤ peer_id –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ø–∞–º–∞!\n")

#def remover(message_id, peer_id):
#  vk.messages.delete(message_ids=message_id, peer_id=peer_id, delete_for_all=1)

def worker():
    while True:
      if len(peers) == 0:
        time.sleep(4)
      elif len(peers) > 0:
        for i in peers:
          try:
            vk.messages.setActivity(peer_id=i,type=typing_type)
          except:
            print('–í —á–∞—Ç–µ '+i+' –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ.')
        time.sleep(10)
def gamlet_worker():
  while True:
    global messages
    if gamlet == 1:
      cycle = 1
      for i in peers:
        cycle += 1
        try:
          messages.append(vk.messages.send(peer_id=i, random_id=random.randint(1, 999999999), message=templates[random.randint(0, len(templates)-1)]))
        except:
          print('–í —á–∞—Ç–µ '+i+' –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
      time.sleep(30)
      for a in messages:
        try: vk.messages.delete(message_ids=a, delete_for_all=1)
        except (RuntimeError, TypeError, NameError):
          pass
        time.sleep(5)
      messages = []
      time.sleep(10)
      
Thread(target=worker).start()
Thread(target=gamlet_worker).start()

while True:
  if len(token) < 75:
    os.system('cls')
    print("VK Crazy Typing Reborn")
    print("–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–¥–µ—Å—å: vkhost.github.io")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:")
    token = input()
    vk_session = vk_api.VkApi(token=token, captcha_handler=captcha_handler)
    vk_session._auth_token()
    vk = vk_session.get_api()
  if len(peers) == 0:
    print("–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–∑ –±–µ—Å–µ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞!\n"
          + color.GREEN +
         "1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤.\n2. –í–≤–µ—Å—Ç–∏ peer_id" + color.END)
    select = input()
    if select == "1":
      os.system('cls')
      print("–°–º–æ—Ç—Ä—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...\n")
      get_dialogs()
    elif select == "2":
      input_str = input("–í–≤–µ–¥–∏—Ç–µ peer_id: ")
      if check_peer(input_str):
        peers.append(input_str)
        print("–î–æ–±–∞–≤–ª–µ–Ω–æ:" + peers[-1])
        time.sleep(1.5)
        os.system('cls')
      else:
        print(color.RED + "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –≤–≤–µ–¥—ë–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤." + color.END)
        time.sleep(1.5)
        os.system('cls')
    else:
      print ("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É.")
      os.system('cls')
  if len(peers) > 0:
    print(color.GREEN + "–°—Ç–∞—Ç—É—Å: –í–∫–ª—é—á—ë–Ω!\n"
          + color.END +
          "(–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ –∑–∞–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–ø–∞–º–∞)\n\n"
          "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n"
          + color.GREEN +
         "1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤.\n2. –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥.\n"
          + color.END + color.RED +
          "3. –£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥.\n4. –†–µ–∂–∏–º –ø—Ä–∏–∑—Ä–∞–∫–∞ üëª (–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)\n" 
          + color.END +
          "5. –°–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –Ω–∞–±–æ—Ä–∞ (–¢–µ–∫—É—â–∏–π - "
          + typing_type +
          ")"
         )
    select = input()
    if select == "1":
      get_dialogs()
    elif select == "2":
      input_id = input("–í–≤–µ–¥–∏—Ç–µ peer_id: ")
      exist_count = peers.count(input_id)
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ —Å–ø–∏—Å–∫–µ
      if exist_count > 0:
        print("–¢–∞–∫–æ–π –¥–∏–∞–ª–æ–≥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
      elif check_peer(input_id):
        peers.append(input_id)
        print(color.GREEN + "–î–æ–±–∞–≤–ª–µ–Ω–æ: " + peers[-1] + color.END)
        time.sleep(1.5)
        os.system('cls')
      else:
        print(color.RED + "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –≤–≤–µ–¥—ë–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤." + color.END)
        time.sleep(1.5)
        os.system('cls')
    elif select == "3":
      input_id = input("–í–≤–µ–¥–∏—Ç–µ peer_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
      exist_count = peers.count(input_id)
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      if exist_count == 0:
        print("–¢–∞–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç.")
        time.sleep(1.5)
        os.system('cls')
      else:
        peers.remove(input_id)
        print(color.RED + "–£–¥–∞–ª–µ–Ω–æ: " + input_id + color.END)
        time.sleep(1.5)
        os.system('cls')
    elif select == "4":
      if gamlet == 0:
        gamlet = 1
        print("–í–∫–ª—é—á–µ–Ω–æ!")
      else:
        gamlet = 0
        print("–í—ã–∫–ª—é—á–µ–Ω–æ!")
      time.sleep(1.5)
      os.system('cls')
    elif select == "5":
      if typing_type == "typing":
        typing_type = "audiomessage"
        print('–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ')
        time.sleep(1.5)
        os.system('cls')
      else:
        typing_type = "typing"
        print('–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä')
        time.sleep(1.5)
        os.system('cls')
    else:
      print ("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É.")
      time.sleep(1.5)
      os.system('cls')
